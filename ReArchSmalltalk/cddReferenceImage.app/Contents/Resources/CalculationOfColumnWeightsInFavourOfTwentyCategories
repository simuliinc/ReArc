"CalculationOfColumnWeightsInFavourOfTenCategoriesThis method uses the total number of spikes produced by layer three cortical neurons in each column in each category instance presentation. These spike counts are recorded in PresentationResults.The global variable ColumnWeightsInFavourOfCategories is a 'black box' basal ganglia. It is implemented as an OrderedCollection of OrderedCollections, one for each category. Each of the OrderedCollections models the cortical weights of each column into the basal ganglia neuron corresponding with the behaviour of identifying one category.Hence in response to a presentation, the total weights in favour of each category are determined by finding the total across all columns of (number of spikes from the column * weight of category for that column). The category with the largest weight is then selected.In this method, using the cortical outputs of the presentations from startPoint to stopPoint, the weights in favour of each category are defined. It is assumed that the brain is provided with information indicating the correct category during these presentations. The effect is that FIRST, the most strongly recommended category using previous weights is determined. SECOND the weights of active columns in favour of the correct category are increased. THIRD, if the initial identification was incorrect, the weights of active columns in favour of that incorrect category are reduced."    | resultsToBeProcessed startPoint stopPoint numberOfCategories numberOfPresentations target currentIdentity currentPresentation currentCategoryWeightInCurrentPresentation weightsOfCategoriesInCurrentPresentation referenceWeightsOfCurrentCategory  selectedCategory | startPoint := 201.stopPoint := 300.resultsToBeProcessed := PresentationResults copyFrom: startPoint to: stopPoint.numberOfPresentations := 1 + stopPoint - startPoint. numberOfCategories := 10.weightReductionFactor := WeightReductionFactor."The following code sets up the structure of column weights in favour of categories, setting all weights initially to zero"ColumnWeightsInFavourOfCategories := OrderedCollection new.1 to: numberOfCategories do: [:col1|	ColumnWeightsInFavourOfCategories addLast: OrderedCollection new.	1 to: NumberOfColumns do: [:j| (ColumnWeightsInFavourOfCategories last) addLast: 0].	].   "END do col1""The following code sets up information about which category is presented in each presentation"target := OrderedCollection new.1 to: (numberOfPresentations/numberOfCategories) do: [:cat1|	1 to: numberOfCategories do: [:k| target addLast: k].	]."The following do loop goes through each of the presentations. FIRST it determines which category is most strongly recommended using previously defined weights. SECOND it adds the number of spikes generated by each column to the defined weight of that column in favour of the correct category. THIRD, if the category it picked first was incorrect, the recommendation weights in favour of the incorrect category of all the columns that produced spikes are reduced by a factor of weightReductionFactor"1 to: numberOfPresentations do: [:presentation|	"FIRST:  In the following code, for each presentation, the weights in favour of each category are calculated using the current ColumnWeightsInFavourOfCategories." 		currentIdentity := target at: presentation.	currentPresentation := resultsToBeProcessed at: presentation.	weightsOfCategoriesInCurrentPresentation := OrderedCollection new.	1 to: numberOfCategories do: [:cat2|		referenceWeightsOfCurrentCategory := (ColumnWeightsInFavourOfCategories at: cat2).			currentCategoryWeightInCurrentPresentation := 0.		1 to: (currentPresentation size) do: [:col2|			currentCategoryWeightInCurrentPresentation := currentCategoryWeightInCurrentPresentation + ((currentPresentation at: col2)*(referenceWeightsOfCurrentCategory at: col2)).		].   "END do col2"		weightsOfCategoriesInCurrentPresentation addLast: (currentCategoryWeightInCurrentPresentation).	].   "END do cat2"	"In the following code, for each presentation, the category with the largest current recommendation weight is determined"				selectedCategory := (weightsOfCategoriesInCurrentPresentation largest) at: 2.  "(largest at: 2) returns the index of largest""SECOND:  In the following code, for each presentation, the number of spikes generated by a column is added to the recorded weight of that column in favour of the correct category" 	1 to: NumberOfColumns do: [:col4|		(ColumnWeightsInFavourOfCategories at: currentIdentity)			at: col4			put: ((((ColumnWeightsInFavourOfCategories at: currentIdentity) at: col4)) + (currentPresentation at: col4)).	].   "END do col4"					"THIRD:  if the original selection was incorrect,  decrease the weights in favour of the incorrectly selected category of any active columns"			(selectedCategory = currentIdentity) ifFalse: [		1 to: NumberOfColumns do: [:col5|			((currentPresentation at: col5) > 0) ifTrue: [				(ColumnWeightsInFavourOfCategories at: selectedCategory)					at: col5					put: (((ColumnWeightsInFavourOfCategories at: selectedCategory) at: col5)/weightReductionFactor).				].   "END ((currentPresentation at: col5) > 0) ifTrue"						].   "END NumberOfColumns do"			].   "END (selectedCategory = currentIdentity) ifFalse"].   "END do presentation"^ColumnWeightsInFavourOfCategories